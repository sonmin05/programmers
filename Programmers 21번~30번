### 21. 코드 처리하기

```c
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

// 파라미터로 주어지는 문자열은 const로 주어집니다. 변경하려면 문자열을 복사해서 사용하세요.
char* solution(const char* code) {
    // return 값은 malloc 등 동적 할당을 사용해주세요. 할당 길이는 상황에 맞게 변경해주세요.
    char* answer = (char*)calloc(100000, sizeof(char));
    int ansIdx = 0;
    int mode = 0;
    for(int i = 0; i < strlen(code); i++) {
        if(code[i] == '1')
            mode = ++mode % 2;
        else
            if(mode == 0 && i % 2 == 0)
                answer[ansIdx++] = code[i];
            else if(mode == 1 && i % 2 == 1)
                answer[ansIdx++] = code[i];
    }
    return ansIdx == 0 ? "EMPTY" : answer;
}
```

### 22. 등차수열의 특정한 항만 더하기

```c
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

// included_len은 배열 included의 길이입니다.
int solution(int a, int d, bool included[], size_t included_len) {
    int answer = 0;
    for (int i=0, start=a; i<included_len; i++, start+=d) {
        if (included[i]) answer += start;
    }
    return answer;
}
```

### 23. 주사위 게임 2

```c
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

int solution(int a, int b, int c) {
    int answer = 0;
    answer = a + b + c;
    if(a == b || a == c || b == c)
    {
        answer *= a*a + b*b + c*c;
        if(a == b && a == c) answer *= a*a*a + b*b*b + c*c*c;
    }
    return answer;
}
```

### 24. 원소들의 곱과 합

```c
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

// num_list_len은 배열 num_list의 길이입니다.
// 우선 전부 리스트 안에 수를 다 더해서 num1에 저장
// 그 다음 num2에 모든배열의 곱을 계산 num1를 제곱시키고 num2와 비교시킨다
int solution(int num_list[], size_t num_list_len) {
    int answer = 0;
    int num1 = 0;
    int num2 = 1;
    for(int i=0; i<num_list_len;i++){
        num1+=num_list[i];
        num2 = num2*num_list[i];
    }
    num1 = num1*num1;
    if(num1>num2){
        return 1;
    }
    else if(num1<num2){
        return 0;
    }
}
```

### 25. 이어 붙인 수

```c
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

// num_list_len은 배열 num_list의 길이입니다.
int solution(int num_list[], size_t num_list_len) {
    int odd = 0;
    int even = 0;

    for(int i = 0; i < num_list_len; i++)
    {
        if(num_list[i] % 2) odd = odd * 10 + num_list[i];
        else even = even * 10 + num_list[i];
    }
    return odd + even;
}
```

### 26. 마지막 두 원소

```c
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

// num_list_len은 배열 num_list의 길이입니다.
int* solution(int num[], size_t len) {
    // return 값은 malloc 등 동적 할당을 사용해주세요. 할당 길이는 상황에 맞게 변경해주세요.
    int* answer = (int*)malloc(sizeof(int)*(len+1));
    int i = 0;
    for(i = 0 ; i < len ; i ++){
        answer[i] = num[i];
    }   
    if(answer[len-1]>answer[len-2]){
        answer[len] = answer[len-1] - answer[len-2];
    }
    else{
        answer[len] = 2*answer[len-1];
    }
    return answer;
}
```

### 27. 수 조작하기 1

```c
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

// 파라미터로 주어지는 문자열은 const로 주어집니다. 변경하려면 문자열을 복사해서 사용하세요.
int solution(int n, const char* control) {
    int len = strlen(control);

    for(int i = 0; i < len; i++)
    {
        if(control[i] == 'w') ++n;
        else if(control[i] == 's') --n;
        else if(control[i] == 'd') n += 10;
        else if(control[i] == 'a') n -= 10;
    }
    return n;
}
```

### 28. 수 조작하기 2

```c
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

// numLog_len은 배열 numLog의 길이입니다.
char* solution(int numLog[], size_t numLog_len) {
    // return 값은 malloc 등 동적 할당을 사용해주세요. 할당 길이는 상황에 맞게 변경해주세요.
    char answer[100000]={0};
    for(int i = 0; i<numLog_len-1; i++){
        if(numLog[i]+1==numLog[i+1]){
            answer[i]='w';
        }
               else if(numLog[i]-1==numLog[i+1]){
            answer[i]='s';
        }
               else if(numLog[i]+10==numLog[i+1]){
            answer[i]='d';
        }
               else {
            answer[i]='a';
        }

    }
    return answer;
}
```

### 29. 수열과 구간 쿼리 3

```c
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

// arr_len은 배열 arr의 길이입니다.
// queries_rows는 2차원 배열 queries의 행 길이, queries_cols는 2차원 배열 queries의 열 길이입니다.
int* solution(int arr[], size_t arr_len, int** queries, size_t queries_rows, size_t queries_cols) {
    // return 값은 malloc 등 동적 할당을 사용해주세요. 할당 길이는 상황에 맞게 변경해주세요.
    int* answer = (int*)malloc(arr_len + 1);

    for(int i = 0; i < queries_rows; i++)
    {
        for(int j = 0; j < queries_cols; j++)
        {
            int temp = 0;
            temp = arr[queries[i][0]];
            arr[queries[i][0]] = arr[queries[i][j]];
            arr[queries[i][j]] = temp;            
        }
    }

    answer = arr;
    return answer;
}
```

### 30.  수열과 구간 쿼리 2

```c
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

int* solution(int arr[], size_t arr_len, int **queries, size_t queries_rows, size_t queries_cols) {
    int* answer = (int*)malloc(sizeof(int) * queries_rows);

    for (int i = 0; i < queries_rows; i++) 
    {
        answer[i] = 1000001;

        for (int j = queries[i][0]; j <= queries[i][1]; j++)
            if (arr[j] < answer[i] && arr[j] > queries[i][2]) answer[i] = arr[j];

        if (answer[i] == 1000001) answer[i] = -1;
    }

    return answer;
}
```
